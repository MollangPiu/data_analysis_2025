# -*- coding: utf-8 -*-
"""02. 머신러닝모델_예측모델_서빙모델(실행파일).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VO_R4hGT9VC7pRIyUuw4vhziyemF5biA
"""

try:
    from google.colab import drive
    inColab = True
except Exception as e:
    inColab = False

pip install asyncio

pip install asyncio

if inColab == True:
    !pip install -U uvicorn==0.34.2 fastapi==0.115.12 pandas==2.2.2 numpy==2.0.2 joblib==1.4.2  scikit-learn==1.6.1
    !pip install -U pyngrok==7.2.5

# uvicorn==0.34.2
# fastapi==0.115.12
# pandas==2.2.2
# numpy==2.0.2

!pip show numpy

# !pip install uvicorn
# !pip install fastapi
# !pip install  nest-asyncio pyngrok

# 학습결과 저장관련 라이브러리
import pickle
import joblib
# 데이터 처리 라이브러리
import pandas as pd
import numpy as np
###### 서빙모델 차이점 시작
# 서빙모델 서버 라이브러리
import uvicorn
# 데이터 연계 라이브러리
from fastapi import FastAPI
from pydantic import BaseModel

from fastapi.middleware.cors import CORSMiddleware
origins = ["*"]

app = FastAPI(title="ML API")

# CORS 미들웨어 추가
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # 모든 origin 허용
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

"""### 2. 모델 불러오기"""

loadedModel = joblib.load("mlcore.dump")

inHclus = 4
inPropercent = 0.0
inPromtion = 0
inHoliday = 0

inDf = pd.DataFrame([[ inHclus, inPropercent,inPromtion, inHoliday ]])
result = loadedModel.predict(inDf)[0]
result

class InDataset(BaseModel):
    inHclus : int
    inPropercent : float
    inPromotion : int
    inHoliday : int

"""### 4. 예측용 함수 정의"""

@app.post("/predictBase", status_code=200)
async def predict_tf(x: InDataset):
    ## 외부 API를 통해 받은 변수
    inHclus = x.inHclus
    inPropercent = x.inPropercent
    inPromotion = x.inPromotion
    inHoliday = x.inHoliday
    print(x)

    inDf = pd.DataFrame([[ inHclus, inPropercent,inPromtion, inHoliday ]])
    result = loadedModel.predict(inDf)[0]
    return {"predictValue": result}

@app.get("/")
async def root():
    return {"message":"online"}

import uvicorn
if __name__ == "__main__":
    uvicorn.run("app:app", host="0.0.0.0", port=9999, log_level="debug",
                proxy_headers=True, reload=True)

# import nest_asyncio
# from pyngrok import ngrok
# import uvicorn
# # Get your authtoken from https://dashboard.ngrok.com/get-started/your-authtoken
# auth_token = "본인ngrok키"
# # Set the authtoken
# ngrok.set_auth_token(auth_token)
# ngrok_tunnel = ngrok.connect(9999)
# print('공용 URL:', ngrok_tunnel.public_url)
# nest_asyncio.apply()
# uvicorn.run(app, port=9999)